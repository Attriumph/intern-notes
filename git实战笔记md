
* 1.快速拉取远程分支并创建本地分支方法：

      git checkout -b 本地分支名 origin/远程分支名
      //在哪个分支创建，就是复制哪个分支去创建
* 2.push和pull命令总结：

      git push <远程主机名> <本地分支名>:<远程分支名>
      git pull <远程主机名> <远程分支名>:<本地分支名>

   **注意，分支推送或者拉取的顺序的写法是<来源地>:<目的地>** ,

  > 所以git pull是<远程分支>:<本地分支>，而git push是<本地分支>:<远程分支>。
如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。
使用该方式会在本地新建分支，并自动切换到该本地分支。

  比如，要取回origin主机的next分支，与本地的master分支合并，需要写成下面这样 -

      $ git pull origin next:master

  如果远程分支(next)要与当前分支合并，则冒号后面的部分可以省略。上面命令可以简写为：

      $ git pull origin next

  >在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)。

   >**同时，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。
Git也允许手动建立追踪关系。**

      $ git branch --set-upstream master origin/next
      //指定master分支追踪origin/next分支。

  查看upstream的情况，使用：

      $ git remote -v

   如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。

      $ git pull origin

  >上面命令表示，本地的当前分支自动与对应的origin主机”追踪分支”(remote-tracking branch)进行合并。
如果当前分支只有一个追踪分支，连远程主机名都可以省略。

      $ git pull

  > 上面命令表示，当前分支自动与唯一一个追踪分支进行合并。

  **如果合并需要采用rebase模式，可以使用–rebase选项。**

      $ git pull --rebase <远程主机名> <远程分支名>:<本地分支名>
  > rebase  就是在拉线上新代码，和你本地的整合到一起,相比merge，rebase会取消掉所有之前所有的commit提交
    rebase 的过程中尽量不要有其他操作，不要 commit merge 之类的，最好也不要 git rebase --abort 最好把当前 rebase 过程走完，再做其他操作


* 3.git 团队协作
    ##### 常用代码
      git pull --rebase upstream beta
      git reset --hard 1e3xxx  //返回某个commit
      git remote add upstream https://github.xxx
      （git rebase upstream beta）
      git pull --rebase upstream beta---- rebase代码
      手动解决下冲突
      git add .
      git rebase --continue
      git push origin <your_dev>

   #### 减少分支commit
     * commit --amend
     > 当commit的内容相近时，可以在 commit 的时候使用 git commit --amend 来合并当前
    commit 到上一个 commit 里，可避免每次修改都有一个 commit, 也有助于他人 review 代码
    * 多余的 commit log 可以用 git rebase -i xxx 给 fixup 掉

* 4.将创建的本地代码上传到Github上：
   * 在Github上new一个repository；

   * 进入本地的项目目录下，建立git仓库：

         git init

   * 将项目所有文件添加到仓库中：

         git add .

   * 将添加的文件提交到仓库：

         git commit -m "文件描述"

  * 将本地仓库关联到Github上：

        git remote add origin url_of_your_newrepository

  * 上传代码到Github远程仓库：

        git push -u origin master
